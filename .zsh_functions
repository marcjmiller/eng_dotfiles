#  Useful functions for use in the shell

# ===============================================================
#                    Colornames to colors
# ===============================================================

# RESET       "\033[0m"
# BLACK       "\033[30m"
# RED         "\033[31m"
# GREEN       "\033[32m"
# YELLOW      "\033[33m"
# BLUE        "\033[34m"
# MAGENTA     "\033[35m"
# CYAN        "\033[36m"
# WHITE       "\033[37m"


# Usage: mkd <path/to/your/new/dir>
# Descripion: makes a directory (recursively down the path) and cds into it
function mkd() {
	mkdir -p "$@" && cd "$@"
}

# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
function extract () {
    if [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)     unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}


# Usage: info "<string>"
# Descripion: prints [ .. ] <string> \n (.. will be blue)
info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1 \n"
}

# Usage: success "<string>"
# Descripion: prints [ OK ] <string> \n (OK will be green)
success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

# Usage: fail "<string>"
# Descripion: prints [ FAIL ] <string> \n (FAIL will be red)
# then exits the script
fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}
